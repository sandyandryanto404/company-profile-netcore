// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("backend.Models.Entities.LoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IpAddress");

                    b.HasIndex("Login");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("LoginAttempt");
                });

            modelBuilder.Entity("backend.Models.Entities.PasswordReset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("Token");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("PasswordReset");
                });

            modelBuilder.Entity("backend.Models.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<short>("Status")
                        .HasColumnType("int2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Facebook")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Instagram")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Province")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("Regency")
                        .HasColumnType("varchar(191)");

                    b.Property<short>("Status")
                        .HasColumnType("int2");

                    b.Property<string>("Twitter")
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("BirthDate");

                    b.HasIndex("BirthPlace");

                    b.HasIndex("Country");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Facebook");

                    b.HasIndex("FirstName");

                    b.HasIndex("Gender");

                    b.HasIndex("Image");

                    b.HasIndex("Instagram");

                    b.HasIndex("LastName");

                    b.HasIndex("Password");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PostalCode");

                    b.HasIndex("Province");

                    b.HasIndex("Regency");

                    b.HasIndex("Status");

                    b.HasIndex("Twitter");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("backend.Models.Entities.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<short>("Status")
                        .HasColumnType("int2");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Description");

                    b.HasIndex("Status");

                    b.HasIndex("Subject");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("backend.Models.Entities.UserVerification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("int2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("ExpiredAt");

                    b.HasIndex("Status");

                    b.HasIndex("Token");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerification");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("backend.Models.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Entities.UserNotification", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "User")
                        .WithMany("UserNotification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Entities.UserVerification", b =>
                {
                    b.HasOne("backend.Models.Entities.User", "User")
                        .WithMany("UserVerification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Entities.User", b =>
                {
                    b.Navigation("UserNotification");

                    b.Navigation("UserVerification");
                });
#pragma warning restore 612, 618
        }
    }
}
